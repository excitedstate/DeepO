Aggregate  (cost=5208.11..5208.12 rows=1 width=96) (actual time=1303.649..1303.653 rows=1 loops=1)
  ->  Hash Join  (cost=48.75..5173.01 rows=4680 width=59) (actual time=2.916..1183.899 rows=765319 loops=1)
        Hash Cond: (ml.link_type_id = lt.id)
        ->  Nested Loop  (cost=22.78..5134.68 rows=4680 width=63) (actual time=2.904..1112.150 rows=765319 loops=1)
              ->  Nested Loop  (cost=22.35..4778.97 rows=214 width=71) (actual time=2.411..848.488 rows=24078 loops=1)
                    ->  Nested Loop  (cost=21.92..4675.41 rows=229 width=56) (actual time=2.407..809.210 rows=24382 loops=1)
                          ->  Nested Loop  (cost=21.76..4669.10 rows=232 width=60) (actual time=2.400..798.767 rows=27273 loops=1)
                                Join Filter: (t.id = mc.movie_id)
                                ->  Nested Loop  (cost=21.33..4616.40 rows=88 width=24) (actual time=2.384..726.006 rows=7738 loops=1)
                                      ->  Nested Loop  (cost=20.90..4570.74 rows=95 width=4) (actual time=1.654..119.835 rows=52583 loops=1)
                                            ->  Bitmap Heap Scan on keyword k  (cost=13.28..24.95 rows=3 width=4) (actual time=0.036..0.043 rows=3 loops=1)
                                                  Recheck Cond: (keyword = ANY ('{sequel,revenge,based-on-novel}'::text[]))
                                                  Heap Blocks: exact=2
                                                  ->  Bitmap Index Scan on keyword_idx_keyword  (cost=0.00..13.28 rows=3 width=0) (actual time=0.031..0.032 rows=3 loops=1)
                                                        Index Cond: (keyword = ANY ('{sequel,revenge,based-on-novel}'::text[]))
                                            ->  Bitmap Heap Scan on movie_keyword mk  (cost=7.62..1511.15 rows=411 width=8) (actual time=2.106..38.430 rows=17528 loops=3)
                                                  Recheck Cond: (keyword_id = k.id)
                                                  Heap Blocks: exact=30658
                                                  ->  Bitmap Index Scan on movie_keyword_idx_keywordid  (cost=0.00..7.51 rows=411 width=0) (actual time=1.148..1.148 rows=17528 loops=3)
                                                        Index Cond: (keyword_id = k.id)
                                      ->  Index Scan using title_pkey on title t  (cost=0.43..0.48 rows=1 width=20) (actual time=0.011..0.011 rows=0 loops=52583)
                                            Index Cond: (id = mk.movie_id)
                                            Filter: (production_year > 1950)
                                            Rows Removed by Filter: 0
                                ->  Index Scan using movie_companies_idx_mid on movie_companies mc  (cost=0.43..0.56 rows=3 width=36) (actual time=0.006..0.008 rows=4 loops=7738)
                                      Index Cond: (movie_id = mk.movie_id)
                                      Filter: (note IS NOT NULL)
                                      Rows Removed by Filter: 2
                          ->  Memoize  (cost=0.16..0.18 rows=1 width=4) (actual time=0.000..0.000 rows=1 loops=27273)
                                Cache Key: mc.company_type_id
                                Cache Mode: logical
                                Hits: 27271  Misses: 2  Evictions: 0  Overflows: 0  Memory Usage: 1kB
                                ->  Index Scan using company_type_pkey on company_type ct  (cost=0.15..0.17 rows=1 width=4) (actual time=0.002..0.002 rows=0 loops=2)
                                      Index Cond: (id = mc.company_type_id)
                                      Filter: ((kind IS NOT NULL) AND ((kind)::text <> 'production companies'::text))
                                      Rows Removed by Filter: 0
                    ->  Index Scan using company_name_pkey on company_name cn  (cost=0.42..0.45 rows=1 width=23) (actual time=0.001..0.001 rows=1 loops=24382)
                          Index Cond: (id = mc.company_id)
                          Filter: ((country_code)::text <> '[pl]'::text)
                          Rows Removed by Filter: 0
              ->  Index Scan using movie_link_idx_mid on movie_link ml  (cost=0.43..1.22 rows=44 width=8) (actual time=0.006..0.009 rows=32 loops=24078)
                    Index Cond: (movie_id = t.id)
        ->  Hash  (cost=17.10..17.10 rows=710 width=4) (actual time=0.008..0.009 rows=18 loops=1)
              Buckets: 1024  Batches: 1  Memory Usage: 9kB
              ->  Seq Scan on link_type lt  (cost=0.00..17.10 rows=710 width=4) (actual time=0.005..0.006 rows=18 loops=1)
Planning Time: 5.456 ms
Execution Time: 1303.707 ms